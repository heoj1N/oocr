[project]
name = "oocr"
version = "0.1.0"
description = "Open-source Optical Character Recognition (OCR) toolkit"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"

dependencies = [
    # Core dependencies
    "albumentations>=1.3.1",
    "torch>=2.5.1",
    "torchaudio>=2.5.1",
    "torchvision>=0.20.1",
    "pytorch-lightning>=2.5.0",
    "transformers>=4.47.0",
    
    # OCR & Document Processing
    "donut-python>=1.0.9",
    "easyocr>=1.7.2",
    "pdfminer.six>=20231228",
    "pdfplumber>=0.11.4",
    "pypdfium2>=4.30.0",
    
    # Image Processing
    "pillow>=10.2.0",
    "opencv-python-headless>=4.10.0",
    "scikit-image>=0.25.0",
    
    # Machine Learning & Data Science
    "numpy>=1.26.3",
    "pandas>=2.2.3",
    "scikit-learn>=1.5.2",
    "scipy>=1.14.1",
    "matplotlib>=3.9.3",
    "huggingface-hub>=0.26.5",
    "datasets>=3.1.0",
    "evaluate>=0.4.3",
    
    # Text Processing
    "nltk>=3.9.1",
    "python-bidi>=0.6.3",
    "sentencepiece>=0.2.0",
    "tokenizers>=0.21.0",
    "jiwer>=3.0.5",  # Word Error Rate calculation
    
    # Utilities
    "tqdm>=4.67.1",
    "PyYAML>=6.0.2",
    "click>=8.1.7",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.4",
    "pytest-cov>=4.1.0",
    "ruff>=0.9.6",
]

docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-autodoc-typehints>=1.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["oocr"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = [
    "--cov=oocr/oocr",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--verbose"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.9
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"